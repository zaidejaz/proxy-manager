name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Export Secrets
        run: |
          echo "SSH_USER=${{ secrets.SSH_USER }}" >> $GITHUB_ENV
          echo "SSH_HOST=${{ secrets.SSH_HOST }}" >> $GITHUB_ENV
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> $GITHUB_ENV
          echo "EMAIL=${{ secrets.EMAIL }}" >> $GITHUB_ENV
      
      - name: Create env file
        run: |
          cat <<EOF > .env.prod
          FLASK_APP=proxy_manager
          FLASK_ENV=production
          DATABASE_URL=sqlite:///proxies.db
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          API_KEY=${{ secrets.API_KEY }}
          WEBSHARE_API_KEY=${{ secrets.WEBSHARE_API_KEY }}
          DOMAIN=${{ secrets.DOMAIN }}
          EMAIL=${{ secrets.EMAIL }}
          EOF
      
      - name: Deploy to Server
        run: |
          # Create the deployment directory and required subdirectories
          ssh $SSH_USER@$SSH_HOST "mkdir -p ~/$APP_DIR/nginx ~/$APP_DIR/certbot/conf ~/$APP_DIR/certbot/www ~/$APP_DIR/data"

          # Copy project files
          scp -r ./* .env.prod $SSH_USER@$SSH_HOST:~/$APP_DIR/

          # Generate nginx config file on the server
          ssh $SSH_USER@$SSH_HOST << 'EOF'
          export DOMAIN="${DOMAIN}"
          export EMAIL="${EMAIL}"
          cd ~/$APP_DIR/nginx
          envsubst '\$DOMAIN' < app.template.conf > app.conf
          EOF

          # Make setup script executable and run setup
          ssh $SSH_USER@$SSH_HOST << 'EOF'
          cd ~/$APP_DIR
          chmod +x setup.sh
          ./setup.sh
          docker-compose down
          docker-compose up -d --build
          EOF
